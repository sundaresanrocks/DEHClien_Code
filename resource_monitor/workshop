**************************
**** Pre-Requirements ****
**************************

> Docker registry credentials
user name: Sundaresan.Venkatesan
Password: WIT@202020

now registry

user name: Sundaresan.Venkatesan
Password: Brain@123

> Download DEHClient project from gitlabs:
git clone git clone https://gitlab.h2020-demeter-cloud.eu/demeterproject/wp3/demeterenablerhub/dehclient.git

> Pull the DEHClient image from the registry.
Registry: registry.gitlab.com/demeterproject/wp3/demeterenablerhub/dehclient:v3

Docker login:
sudo docker login registry.gitlab.com

sudo docker pull registry.gitlab.com/demeterproject/wp3/demeterenablerhub/dehclient:v3

> Configure Docker host with following, for open communication between DEH Client & Docker HOST

    sudo vi /lib/systemd/system/docker.service

update : docker.service
    ExecStart=/usr/bin/dockerd -H fd:// -H tcp://<<Internet IP Address>>:2375
    or
    ExecStart=/usr/bin/dockerd -H fd:// -H tcp://192.168.0.65:2375


Restart Docker daemon service:
    sudo systemctl daemon-reload
    sudo service docker restart
    sudo systemctl restart docker.service

Validate if the Docker daemon is accessible over configured http port
    curl http://10.37.4.44:2375/images/json | json


> Before starting DEH Client, Configure/ update DEH Client environment variables (in the location of the project downloaded earlier)

cd /home/svenkatesan/DEHClient/dehclient
vi .env

attributes to be updated in the .env file:
docker_hostname=demeter-dev-1
docker_host=http://192.168.0.65:2375/
deh_client_port=5003


secure_connection=False
auto_register_bse=True

DEH_ACCOUNT_MAIL=sundaresanrocks@gmail.com
DEH_ACCOUNT_PASS=xxxxxx


DEH RRM & BSE configuration details:
Update only if:
    You are running your own instance of RRM & BSE
    or
    Any Change in the cloud instance of RRM & BSE


MongoDB variables - Don't Change these environment variables

MONGO_DB_PORT=27017
MONGO_DB_EXPOSED_PORT=27018 << Change me only if the port number 27018 of Docker Host is in use be other process>>
MONGODB_DATABASE=DEHClient

> Verify docker-compose.yml file for these attributes:
image name:
container name

> Once download and configuring Docker Host and DEH Client is done, run DEH Client as a container:
Start DEH Client container from the path of the docker compose file.

sudo docker-compose up -d && sudo docker-compose logs -f

> Now you can notice DEH Client running and looking for any container running on Docker Host.
INFO - Attempting to generate metrics periodically i.e. at an interval of : 20 seconds,
metrics data will be captured for all containers with status : Running and are associated with a valid UID.
INFO - Get metrics by uid, List of running containers : ['dehclient_ws01', 'dehclient-db', 'estimate-animal-welfare-condition-ws02'].
Checking if these Containers are associated with an UID.
WARNING - Get metrics by uid, no container found running which are associated with an UID.
Please start some Docker Container/s associated with uid.

> Start a any DEH Enablers as a container on a given Docker Host:
For which Resource Consumption Metrics will be generated.
e.g., instance of image (demeterengteam/estimate-animal-welfare-condition:candidate)

sudo docker pull image demeterengteam/estimate-animal-welfare-condition:candidate

Associate UID ie RRM registration ID to locally downloaded/ pulled DEH Resource Docker Image.
Note: This is an important step,
Each DEH Resource/Enabler across Demeter is identified by a unique ID called UID /RRM ID ie unique registration ID generated
when registering with RRM.

echo "FROM demeterengteam/estimate-animal-welfare-condition:candidate" | docker build --label uid="601ad929cc5e1504df125b04" -t "demeterengteam/estimate-animal-welfare-condition:candidate" -

Verify if the UID is associated with the Docker Image:
sudo docker inspect ea241ada24c1 | grep -i uid

Start Resource as a Docker Container:
sudo docker run -d --name estimate-animal-welfare-condition-ws02 "demeterengteam/estimate-animal-welfare-condition:candidate"

>>>>>>>>>>> Things to notice >>>>>>>>>>>>>>>>>
DEH Client,
> Is scalable.
> Extensible.
> Configurable. more options to the user to configure
        - DEH Client Log level
        - Choice to enable or disable auto registration to BSE.
          With auto_register_bse=True, DEH client will register the DEH Resource Container automatically to BSE if not already.
        - Choice to set up his/ her own instance of ACS, BSE & RRM

> DEH Client, captures metrics of all containers running every 20 seconds into local DB.
> Performance oriented: Reduce load on ACS & RRM by
        Caching ASC tokens.
        Caching metrics data continuously in local DB and POST aggregated metrics data to RRM
> Memory optimized: Schedule job to clean up local mongo db cache.



> Request Metrics with UID:
curl -X GET "http://172.19.0.3:5003/api/v1/DEHClientEnabler/ResourceConsumption/metrics?uid=601ad929cc5e1504df125b04" | json

by status / Metrics for all running containers:
curl -X GET "http://172.19.0.3:5003/api/v1/DEHClientEnabler/ResourceConsumption/metrics?status=running" | json

by container name:
curl -X GET "http://172.19.0.3:5003/api/v1/DEHClientEnabler/ResourceConsumption/individual/metrics?name=estimate-animal-welfare-condition-ws02" | json

> Request Container list matching filter:
curl -X GET "http://172.19.0.3:5003/api/v1/DEHClientEnabler/ResourceConsumption/get_resources_filter?name=condition"

filter by name
curl -X GET "http://172.19.0.3:5003/api/v1/DEHClientEnabler/ResourceConsumption/get_resources_filter?name=animal" | json

filter by status
curl -X GET "http://172.19.0.3:5003/api/v1/DEHClientEnabler/ResourceConsumption/get_resources_filter?status=running" | json

filter by ancestor
curl -X GET "http://172.19.0.3:5003/api/v1/DEHClientEnabler/ResourceConsumption/get_resources_filter?ancestor=demeterengteam/estimate-animal-welfare-condition:candidate" | json


Request Metrics with invalid uid
curl -X GET "http://172.19.0.3:5003/api/v1/DEHClientEnabler/ResourceConsumption/individual/metrics?uid=6062df1537801e241cf995f3" | json

Request Metrics with non existing Container name.
curl -X GET "http://172.19.0.3:5003/api/v1/DEHClientEnabler/ResourceConsumption/individual/metrics?name=non-existing" | json





Other Useful APIs:

> Pull Image:
#############
> Valid image name & tag
curl -i -H "Content-Type: application/json" -X POST -d '{"image":"demeterengteam/pilot4.2-traslator","tag":"candidate"}'
http://localhost:5003/api/v1/DEHClientEnabler/ResourceManagement/image/pull

"sha256:061f1ee69095e5e50b52db9c834ec99e9a73e569c5bfdbfbc4c540c3174fe349"

> Invalid image name
curl -i -H "Content-Type: application/json" -X POST -d '{"image":"demeterengteam/pilot4.2-traslator-invalid","tag":"candidate"}'
http://localhost:5003/api/v1/DEHClientEnabler/ResourceManagement/image/pull

"Image : demeterengteam/pilot4.2-traslator-invalid with
tag : candidate not found in registry or low disk space on local host,
please check the image name & available disk space."

> Invalid tag
curl -i -H "Content-Type: application/json" -X POST -d '{"image":"demeterengteam/pilot4.2-traslator23","tag":"candidate123"}'
http://localhost:5003/api/v1/DEHClientEnabler/ResourceManagement/image/pull

> Invalid image name
curl -i -H "Content-Type: application/json" -X POST -d '{"image":"demeterengteam/pilot4.2-traslator23","tag":"candidate123"}'
http://localhost:5003/api/v1/DEHClientEnabler/ResourceManagement/image/pull

"Image : demeterengteam/pilot4.2-traslator23 with tag : candidate123 not found in registry or
low disk space on local host, please check the image name & available disk space."


> Add uid as label
####################
Note : DEH Client validates with RRM if the given UID is valid ie, if the same is
registered with a DEH resource in RRM before tagging the same with the image locally.

Image : Adding Labels @ runtime
It's not possible to add a label to an existing image bcz adding a label will change the images checksum and id,
thus it's no longer the same image.
But we can build an image based on our existing image with a label added,
then tag this image with the name of the previously existing image.
Technically it adds a layer on top of your existing image and thus just "overrides" previous labels
"""

> invalid UID
curl -i -H "Content-Type: application/json" -X POST -d '{"image":"demeterengteam/estimate-animal-welfare-condition",
"tag":"candidate","labels":{"uid":"610411e8c56e160279440663"}}'
http://localhost:5003/api/v1/DEHClientEnabler/ResourceManagement/image/set_label

Response:
"DEH RRM, resource search result returned success,
but no resource found/ registered with UID 610411e8c56e160279440663. Skipping label. Check if the UID is registered against a valid DEH resource"

> Valid UID:
curl -i -H "Content-Type: application/json" -X POST -d '{"image":"demeterengteam/estimate-animal-welfare-condition",
"tag":"candidate","labels":{"uid":"610411e8c56e160279440661"}}'
http://localhost:5003/api/v1/DEHClientEnabler/ResourceManagement/image/set_label

Response:
[
  "{\"stream\":\"Step 1/2 : FROM demeterengteam/estimate-animal-welfare-condition:candidate\"}\r\n",
  "{\"stream\":\"\\n\"}\r\n",
  "{\"stream\":\" ---\\u003e b64ef0d5ae43\\n\"}\r\n",
  "{\"stream\":\"Step 2/2 : LABEL uid=610411e8c56e160279440661  test_tag_today=test_tag_today\"}\r\n",
  "{\"stream\":\"\\n\"}\r\n",
  "{\"stream\":\" ---\\u003e Running in da11c8d77b83\\n\"}\r\n",
  "{\"stream\":\"Removing intermediate container da11c8d77b83\\n\"}\r\n",
  "{\"stream\":\" ---\\u003e 889d0215ca3b\\n\"}\r\n",
  "{\"aux\":{\"ID\":\"sha256:889d0215ca3b4c9c9453ef69276f5404689926b987ea01f014eb9bcf58ad81e1\"}}\r\n",
  "{\"stream\":\"Successfully built 889d0215ca3b\\n\"}\r\n",
  "{\"stream\":\"Successfully tagged demeterengteam/estimate-animal-welfare-condition:candidate\\n\"}\r\n"
]

> Invalid image
curl -i -H "Content-Type: application/json" -X POST -d '{"image":"centos123","tag":"latest","labels":{"uid":"610411e8c56e160279440661"}}'
http://localhost:5003/api/v1/DEHClientEnabler/ResourceManagement/image/set_label

Reponse:
"Image : centos123 with tag : latest not found in registry or low disk space on local host,
please check the image name & available disk space."


> Run DEH Resource as a container
##################################

> valid image & container name:
curl -i -H "Content-Type: application/json" -X POST -d
'{"image":"demeterengteam/estimate-animal-welfare-condition","tag":"candidate",
"name":"estimate-animal-welfare-condition_demo1"}'
http://localhost:5003/api/v1/DEHClientEnabler/ResourceManagement/container/run
{
  "Status": "Container started successfully !",
  "container_id": "fde9c084db3a0c69aecf9a62cf0ccdeaae4681fcf279ff0c4c51ffaf61ae3deb",
  "container_name": "estimate-animal-welfare-condition_demo101"
}


> Invalid image name
curl -i -H "Content-Type: application/json" -X POST -d
'{"image":"demeterengteam/estimate-animal-welfare-condition-invalid","tag":"candidate","name":"estimate-animal-welfare-condition_demo1"}'
http://localhost:5003/api/v1/DEHClientEnabler/ResourceManagement/container/run

{
  "message": "Image : demeterengteam/estimate-animal-welfare-conditionss:candidate not found."
}

> Valid image name but invalid tag
curl -i -H "Content-Type: application/json" -X POST -d
'{"image":"demeterengteam/estimate-animal-welfare-condition","tag":"candidate123",
"name":"estimate-animal-welfare-condition_demo1"}'
http://localhost:5003/api/v1/DEHClientEnabler/ResourceManagement/container/run

"Communication with docker socket failed or Docker Image not found or Image with specified tag not found.
Please check Image & tag Error response : 404 Client Error for
http://10.0.10.132:2375/v1.41/images/create?tag=candidate123&fromImage=demeterengteam%2Festimate-animal-welfare-condition: Not Found (\"manifest for demeterengteam/estimate-animal-welfare-condition:candidate123 not found: manifest unknown: manifest unknown\") "

> Already existing container name:
 curl -i -H "Content-Type: application/json" -X
 POST -d  '{"image":"centos","name":"centos_demo_1"}'
 http://localhost:5003/api/v1/DEHClientEnabler/ResourceManagement/container/run

"The Container by name estimate-animal-welfare-condition_demo1 already exists, Please use a different Container name"

> Generate Metrics:
###################
> Individual metrics by container name/ status

> Metrics by uid
curl -X GET "http://localhost:5003/api/v1/DEHClientEnabler/ResourceConsumption/metrics?uid=610411e8c56e160279440661"

> Metrics by status
curl -X GET "http://localhost:5003/api/v1/DEHClientEnabler/ResourceConsumption/metrics?status=running"
curl -X GET "http://localhost:5003/api/v1/DEHClientEnabler/ResourceConsumption/metrics?status=all"

> Metrics by name
curl -X GET
"http://localhost:5003/api/v1/DEHClientEnabler/ResourceConsumption/individual/metrics?name=estimate-animal-welfare-condition_demo101"

> Metrics by container ID:
curl -X GET "http://localhost:5003/api/v1/DEHClientEnabler/ResourceConsumption/individual/metrics?id=fde9c084db3a"

> Other useful APIs:
#####################
> Get list of all running containers
curl -X GET "http://localhost:5003/api/v1/DEHClientEnabler/ResourceConsumption/running_containers"
[
  "estimate-animal-welfare-condition_demo101",
  "estimate-animal-welfare-condition_demo18",
  "estimate-animal-welfare-condition_demo17",
  "estimate-animal-welfare-condition_demo12",
  "estimate-animal-welfare-condition_demo7",
  "estimate-animal-welfare-condition_demo6",
  "estimate-animal-welfare-condition_demo2"
]

> Filter
########
> filter by label
curl -X GET
"http://localhost:5003/api/v1/DEHClientEnabler/ResourceConsumption/get_resources_filter?label=uid=610411e8c56e160279440661"

[
  "estimate-animal-welfare-condition_demo101",
  "estimate-animal-welfare-condition_demo18",
  "estimate-animal-welfare-condition_demo17",
  "estimate-animal-welfare-condition_demo12",
  "estimate-animal-welfare-condition_demo7"
]

> filter by status
curl -X GET "http://localhost:5003/api/v1/DEHClientEnabler/ResourceConsumption/get_resources_filter?status=exited"

curl -X GET "http://localhost:5003/api/v1/DEHClientEnabler/ResourceConsumption/get_resources_filter?status=running"

curl -X GET
"http://localhost:5003/api/v1/DEHClientEnabler/ResourceConsumption/get_resources_filter?ancestor=demeterengteam/estimate-animal-welfare-condition:candidate"
[
  "estimate-animal-welfare-condition_demo101",
  "estimate-animal-welfare-condition_demo18",
  "estimate-animal-welfare-condition_demo17",
  "estimate-animal-welfare-condition_demo12",
  "estimate-animal-welfare-condition_demo7"
]



What is done:
##############

Performance:
> Request by uid or Name
& Without register & just look up with RRM & BSE

Response time 10 seconds

*********************************************
** Meeting with Antonio & Marko : 14/04/21 **
*********************************************
Development in progress, features including
    Runtime configuration for capturing metrics - internally.
    Runtime configuration for reporting metrics to DEH.
    Order in which metrics will be sent to DEH.

Updating the document for Module & Enabler Verification Template.

> Deployed instance of DEH client on ENG cloud?
    Challenge : ENG env issue with communicating with BSE & RRM - proxy issue.

> Documentation:
    Detailed Readme.
    Installation instruction.

Suggestion: Add possibility to use proxy to access external url

> Future:
    Brainstorming priority task:

    . MongoDB port.
    . Caching mechanism.
    . Streamline process on registring with RRM

    Note : Create tasks for 
    https://gitlab.com/demeterproject/coordination/workpackage-3/workpackage-3-sprint/-/boards

######################################
Weekly Stand up meeting: 12th Oct 2022
######################################

Member of PAS working on DEMETER project.

Contributions towards: WP 3.5 and WP 4.3

>> WP 3.5: DEH Core Enablers/Components involved

ACS: Access control system.
RRM: Resource registry management.
BSE: Brokerage Service Environment.
DEH Client: Resource Consumption monitoring & report metrics back to RRM for Dashboard visualization.


Feature set:
############



Current Status:
################
V3.0 of DEH Client is deployed and is up and running on ENG cloud.
Latest version tested and deployed on 03rd October 2022
(Feature delivered, Integration with Production BSE service)

Work in progress:
##################
Caching authentication & authorization tokens , this will reduce the load on the RRM & BSE servives

Code Target completion data: 17th October 2022
Integration test completion data : 18th October 2022
Deployment & Monitoring: 18th October 2022

Future Work:
#############
Support and bug fixes.
Real time data streaming.



Why? how this will improve performance:

Reduce load on BSE and RRM services



WP 4.3: Herd health monitoring:
################################
Real time animal welfare scoring framework, to measure the stress and behavioural and its imapact on the milk quality.


Status under development:

What is achived till now:

Data Consumer.
Data parser.
Data Transform.
Data streaming.

Future work:


> Create Local Instance of DEHClient container
sudo docker create --name dehclient_ws02 --env-file ./.env registry.gitlab.com/demeterproject/wp3/demeterenablerhub/dehclient:v1

sudo docker cp ~/docker_test/ca.pem dehclient_ws01:/app/DEHClientEnabler/resource_monitor
sudo docker cp ~/docker_test/cert.pem dehclient_ws01:/app/DEHClientEnabler/resource_monitor
sudo docker cp ~/docker_test/key.pem dehclient_ws04:/app/DEHClientEnabler/resource_monitor

> Start DEH Client Instance
sudo docker start -i dehclient_ws02

> Get the IP addreess of the DEH Client by
sudo docker inspect dehclient_ws02



